{"version":3,"sources":["components/filter-component/FilterComponent.tsx","components/more-details-component/MoreDetailsComponent.tsx","assets/next-movies-logo.png","components/list-component/Item.tsx","components/list-component/ListComponent.tsx","services/api-service.ts","components/main-component/NextMoviesApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilterComponent","props","Grid","container","spacing","item","xs","TextField","name","fullWidth","label","value","freeText","onChange","event","setFreeText","target","InputProps","startAdornment","InputAdornment","position","InputLabel","shrink","Select","className","type","setType","displayEmpty","MenuItem","map","error","fromRating","setFromRating","inputProps","max","min","step","InputLabelProps","disableToolbar","views","variant","format","maxDate","Date","fromReleasedYear","date","setFromReleasedYear","KeyboardButtonProps","Button","onClick","MoreDetailsComponent","Dialog","fullScreen","open","onClose","handleBackClick","AppBar","Toolbar","color","aria-label","src","movie","largeimage","alt","Typography","Parser","title","released","runtime","rating","synopsis","Item","openMoreDetails","id","image","ListComponent","useState","page","setPage","rowsPerPage","setRowsPerPage","useEffect","items","slice","TablePagination","rowsPerPageOptions","component","count","length","labelRowsPerPage","onChangePage","newPage","onChangeRowsPerPage","serverUrl","process","getMovieById","movieId","axios","get","NextMoviesApp","allMovies","setAllMovies","filteredMovies","setFilteredMovies","selectedMovie","setSelectedMovie","handleFilter","criteria","allMoviesCopy","filter","toLowerCase","includes","toString","getFullYear","a","data","alert","movies","logo","undefined","App","utils","DateFnsUtils","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e805e478.chunk.js","sourcesContent":["import React from 'react';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Criteria} from \"../../models/Criteria\";\r\n\r\nexport interface FilterComponentProps {\r\n    freeText: string;\r\n\r\n    setFreeText(value: string): void;\r\n\r\n    type: string\r\n\r\n    setType(value: string): void;\r\n\r\n    fromRating: number | null;\r\n\r\n    setFromRating(value: number | null): void;\r\n\r\n    fromReleasedYear: Date | null;\r\n\r\n    setFromReleasedYear(value: Date | null): void;\r\n\r\n    handleFilter(criteria: Criteria): void;\r\n}\r\n\r\nexport function FilterComponent(props: FilterComponentProps) {\r\n    const types = [\"Movie\", \"Series\"];\r\n\r\n    function handleClearFilters() {\r\n        props.setFreeText('');\r\n        props.setType('');\r\n        props.setFromRating(null);\r\n        props.setFromReleasedYear(null);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={3}>\r\n                <TextField name=\"freeText\"\r\n                           fullWidth\r\n                           label=\"Free text\"\r\n                           value={props.freeText}\r\n                           onChange={(event) => props.setFreeText(event.target.value)}\r\n                           InputProps={{\r\n                               startAdornment: (<InputAdornment position=\"start\">\r\n                                   <SearchIcon/>\r\n                               </InputAdornment>)\r\n                           }}/>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <InputLabel shrink>Type</InputLabel>\r\n                <Select name=\"type\"\r\n                        fullWidth\r\n                        className=\"filter-type\"\r\n                        value={props.type}\r\n                        onChange={(event: any) => props.setType(event.target.value)}\r\n                        displayEmpty>\r\n                    <MenuItem value=\"\">\r\n                        <em>All</em>\r\n                    </MenuItem>\r\n                    {\r\n                        types.map(type => {\r\n                            return (\r\n                                <MenuItem key={type} value={type}>{type}</MenuItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <TextField name=\"fromRating\"\r\n                           fullWidth\r\n                           className=\"filter-rating\"\r\n                           label=\"From Rating\"\r\n                           type=\"number\"\r\n                           error={props.fromRating && props.fromRating! < 0 || props.fromRating! > 10}\r\n                           value={props.fromRating}\r\n                           onChange={(event: any) => props.setFromRating(event.target.value)}\r\n                           InputProps={{\r\n                               inputProps: {\r\n                                   max: 10, min: 0, step: 0.1\r\n                               }\r\n                           }}\r\n                           InputLabelProps={{\r\n                               shrink: true,\r\n                           }}/>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                <KeyboardDatePicker name=\"fromReleasedYear\"\r\n                                    fullWidth\r\n                                    disableToolbar\r\n                                    views={[\"year\"]}\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy\"\r\n                                    label=\"From Year\"\r\n                                    maxDate={new Date()}\r\n                                    value={props.fromReleasedYear}\r\n                                    onChange={(date) => props.setFromReleasedYear(date)}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}/>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <Button className=\"filter-btn\" fullWidth variant=\"outlined\" onClick={handleClearFilters}>\r\n                    Clear filters\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Parser from \"html-react-parser\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Movie} from \"../../models/Movie\";\r\n\r\nexport interface MoreDetailsComponentProps {\r\n    movie: Movie;\r\n\r\n    handleBackClick(): void;\r\n}\r\n\r\nexport function MoreDetailsComponent(props: MoreDetailsComponentProps) {\r\n    return (\r\n        <Dialog fullScreen open={true} onClose={props.handleBackClick}>\r\n            <AppBar>\r\n                <Toolbar>\r\n\r\n                    <Button className=\"backBtn\" color=\"inherit\" onClick={props.handleBackClick} aria-label=\"close\">\r\n                        <ArrowBackIcon/> Back to All\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className=\"more-info-content\">\r\n                <span className=\"movie-details-content\">\r\n                    <img src={props.movie.largeimage} alt=\"\"/>\r\n                </span>\r\n                <div className=\"details\">\r\n                    <Typography variant=\"h6\">\r\n                        <b>{Parser(props.movie.title)}</b>\r\n                    </Typography>\r\n                    <Typography>\r\n                        {props.movie.released + \" | \" + props.movie.runtime + (props.movie.rating ? (\" | \" + props.movie.rating + \"/10\") : \"\")}\r\n                    </Typography>\r\n                    <br/>\r\n                    <Typography className=\"synopsis\">\r\n                        {Parser(props.movie.synopsis)}\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/next-movies-logo.efd3020d.png\";","import React from 'react';\r\nimport Parser from \"html-react-parser\";\r\nimport {Movie} from \"../../models/Movie\";\r\n\r\nexport interface ItemProps {\r\n    openMoreDetails(movieId: number): void;\r\n\r\n    item: Movie;\r\n}\r\n\r\nexport function Item(props: ItemProps) {\r\n    return (\r\n        <div className=\"movie\" onClick={() => props.openMoreDetails(props.item.id)}>\r\n            <div className=\"movie-image\">\r\n                <img alt=\"\" src={props.item.image}/>\r\n            </div>\r\n            <h4>{Parser(props.item.title)}</h4>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {Movie} from \"../../models/Movie\";\r\nimport {Item} from \"./Item\";\r\n\r\nexport interface ListComponentProps {\r\n    items: Movie[];\r\n\r\n    openMoreDetails(movieId: number): void;\r\n}\r\n\r\nexport function ListComponent(props: ListComponentProps) {\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    useEffect(() => {\r\n        setPage(0);\r\n    }, [props.items]);\r\n\r\n    const handleChangePage = (event: any, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: any) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"movies\">\r\n                {\r\n                    props.items.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(item => {\r\n                        return (<Item item={item} openMoreDetails={props.openMoreDetails}/>)\r\n                    })\r\n                }\r\n            </div>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 50, 100]}\r\n                component=\"div\"\r\n                count={props.items.length}\r\n                rowsPerPage={rowsPerPage}\r\n                labelRowsPerPage=\"Movies per page\"\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nlet serverUrl = process.env.REACT_APP_SERVER_URL;\r\n\r\nexport function getMovies() {\r\n    return axios.get(serverUrl + \"/movies\");\r\n}\r\n\r\nexport function getMovieById(movieId: number) {\r\n    return axios.get(serverUrl + \"/movies/\" + movieId);\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport 'fontsource-roboto';\r\nimport {FilterComponent} from \"../filter-component/FilterComponent\";\r\nimport {MoreDetailsComponent} from \"../more-details-component/MoreDetailsComponent\";\r\nimport logo from \"../../assets/next-movies-logo.png\";\r\nimport {ListComponent} from \"../list-component/ListComponent\";\r\nimport {Movie} from \"../../models/Movie\";\r\nimport {getMovieById, getMovies} from \"../../services/api-service\";\r\nimport {Criteria} from \"../../models/Criteria\";\r\n\r\nexport function NextMoviesApp() {\r\n    const [allMovies, setAllMovies] = useState<Movie[]>([]);\r\n    const [filteredMovies, setFilteredMovies] = useState<Movie[]>([]);\r\n    const [selectedMovie, setSelectedMovie] = useState<Movie>();\r\n    const [freeText, setFreeText] = useState<string>('');\r\n    const [type, setType] = useState<string>('');\r\n    const [fromRating, setFromRating] = useState<number | null>(null);\r\n    const [fromReleasedYear, setFromReleasedYear] = useState<Date | null>(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                let movies = await getMovies();\r\n                setAllMovies(movies.data);\r\n                setFilteredMovies(movies.data);\r\n            } catch (e) {\r\n                alert(\"error occurred while trying to get data from server \" + e);\r\n            }\r\n        })();\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleFilter({\r\n            freeText: freeText,\r\n            fromReleasedYear: fromReleasedYear,\r\n            fromRating: fromRating,\r\n            type: type\r\n        })\r\n    }, [freeText, type, fromReleasedYear, fromRating]);\r\n\r\n    function handleFilter(criteria: Criteria) {\r\n        let allMoviesCopy = allMovies.slice();\r\n\r\n        if (criteria.freeText) {\r\n            allMoviesCopy = allMoviesCopy.filter(movie => {\r\n                return movie.title.toLowerCase().includes(criteria.freeText.toLowerCase()) ||\r\n                    movie.synopsis.toLowerCase().includes(criteria.freeText.toLowerCase()) ||\r\n                    movie.rating.toString().includes(criteria.freeText) ||\r\n                    movie.type.toLowerCase().includes(criteria.freeText.toLowerCase()) ||\r\n                    movie.released.toString().toLowerCase().includes(criteria.freeText.toLowerCase())\r\n            });\r\n        }\r\n\r\n        if (criteria.fromReleasedYear) {\r\n            allMoviesCopy = allMoviesCopy.filter(movie => {\r\n                return movie.released >= criteria.fromReleasedYear!.getFullYear()\r\n            })\r\n        }\r\n\r\n        if (criteria.fromRating) {\r\n            allMoviesCopy = allMoviesCopy.filter(movie => {\r\n                return movie.rating >= criteria.fromRating!\r\n            })\r\n        }\r\n\r\n        if (criteria.type) {\r\n            allMoviesCopy = allMoviesCopy.filter(movie => {\r\n                return movie.type.toLowerCase() === criteria.type.toLowerCase()\r\n            })\r\n        }\r\n\r\n        setFilteredMovies(allMoviesCopy);\r\n    }\r\n\r\n    async function openMoreDetails(movieId: number) {\r\n        try {\r\n            let movie = await getMovieById(movieId);\r\n            setSelectedMovie(movie.data[0]);\r\n        } catch (e) {\r\n            alert(\"error occurred while trying to get data from server \" + e);\r\n        }\r\n    }\r\n\r\n    function handleCloseMoreDetails() {\r\n        setSelectedMovie(undefined);\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-comp\">\r\n            <img className=\"logo\" src={logo} alt=\"\"/>\r\n            <FilterComponent handleFilter={handleFilter}\r\n                             freeText={freeText}\r\n                             setFreeText={setFreeText}\r\n                             type={type}\r\n                             setType={setType}\r\n                             fromRating={fromRating}\r\n                             setFromRating={setFromRating}\r\n                             fromReleasedYear={fromReleasedYear}\r\n                             setFromReleasedYear={setFromReleasedYear}/>\r\n            <ListComponent items={filteredMovies} openMoreDetails={openMoreDetails}/>\r\n            {\r\n                selectedMovie &&\r\n                <MoreDetailsComponent movie={selectedMovie} handleBackClick={handleCloseMoreDetails}/>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {NextMoviesApp} from \"./components/main-component/NextMoviesApp\";\n\n\nfunction App() {\n  return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <NextMoviesApp/>\n      </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}